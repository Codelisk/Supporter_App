// <auto-generated>
//     This code was generated by Refitter.
// </auto-generated>


using Refit;
using System.Collections.Generic;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

#nullable enable annotations

namespace Supporter_Dtos
{
    [System.CodeDom.Compiler.GeneratedCode("Refitter", "1.3.2.0")]
    public partial interface ISupporter_Apiv1
    {
        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: application/json")]
        [Get("/api/AIFolder/GetPaginated")]
        Task GetPaginated([Query] string search, [Query] string searchField, [Query] int? page, [Query] int? perPage, [Query] string sortBy, [Query] string sortOrder, [Query] string filterBy, [Query] string filter);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: application/json")]
        [Delete("/api/AIFolder/DeleteAll")]
        Task<int> DeleteAll([Query] bool? areYouSure);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: application/json")]
        [Delete("/api/AIFolder/DeleteAllByRange")]
        Task<int> DeleteAllByRange([Body] IEnumerable<System.Guid> body);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: application/json")]
        [Get("/api/AIFolder/GetRange")]
        Task<ICollection<AIFolderDto>> GetRange([Query(CollectionFormat.Multi)] IEnumerable<System.Guid> ids);

        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: application/json")]
        [Get("/api/AIFolder/Count")]
        Task<int> Count();

        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: application/json")]
        [Get("/api/AIFolder/GetAll")]
        Task<ICollection<AIFolderDto>> GetAll();

        /// <returns>OK</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: application/json")]
        [Get("/api/AIFolder/Get")]
        Task<AIFolderDto> Get([Query] System.Guid? id);

        /// <returns>A <see cref="Task"/> that completes when the request is finished.</returns>
        /// <exception cref="ApiException">Thrown when the request returns a non-success status code.</exception>
        [Headers("Accept: application/json")]
        [Delete("/api/AIFolder/Delete")]
        Task Delete([Query] System.Guid? id);



    }

}
